import streamlit as st
import numpy as np
import cv2
from PIL import Image
from mtcnn import MTCNN
import tensorflow as tf
from tensorflow.keras.models import load_model
import urllib.request
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
st.set_page_config(page_title="FaceAge", layout="wide")
st.markdown("""
<style>
    .reportview-container {background: #f0f2f6}
    .big-font {font-size:24px !important; color: #2a3f5f}
    .result-box {border-radius:10px; padding:20px; background:#ffffff; margin-top:20px}
    .stProgress > div > div > div > div {background: linear-gradient(to right, #ff4b4b, #ffa84b)}
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.image("https://raw.githubusercontent.com/AIM-Harvard/FaceAge/main/docs/logo.png", width=200)
st.title("üîç FaceAge: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ —Ñ–æ—Ç–æ")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª–∏—Ü–∞, –∏ –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–µ–¥—Å–∫–∞–∂–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç", class_="big-font")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_faceage_model():
    model_url = "https://github.com/AIM-Harvard/FaceAge/raw/main/models/faceage_model.h5"
    model_path = "faceage_model.h5"
    if not os.path.exists(model_path):
        with st.spinner('‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å... –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 1 –º–∏–Ω—É—Ç—ã'):
            urllib.request.urlretrieve(model_url, model_path)
    return load_model(model_path)

try:
    model = load_faceage_model()
except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
    st.stop()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ª–∏—Ü
detector = MTCNN()

def process_image(img):
    try:
        img_rgb = cv2.cvtColor(np.array(img), cv2.COLOR_BGR2RGB)
        faces = detector.detect_faces(img_rgb)
        if not faces:
            return None
        
        main_face = max(faces, key=lambda x: x['confidence'])
        x, y, w, h = main_face['box']
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
        x, y = max(0, x), max(0, y)
        face_img = img_rgb[y:y+h, x:x+w]
        face_img = cv2.resize(face_img, (128, 128))
        face_img = face_img.astype('float32') / 255.0
        
        return face_img, (x, y, w, h)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        return None

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∫–∏
uploaded_file = st.file_uploader("", type=["jpg", "jpeg", "png"], accept_multiple_files=False)

if uploaded_file:
    col1, col2 = st.columns(2)
    
    with col1:
        st.header("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        image = Image.open(uploaded_file)
        st.image(image, use_column_width=True)
    
    with st.spinner('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏—Ü–æ...'):
        result = process_image(image)
    
    if result:
        face_img, bbox = result
        
        with col2:
            st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç")
            st.image(face_img, caption="–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ", clamp=True, channels='RGB')
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            with st.spinner('üß† –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º –≤–æ–∑—Ä–∞—Å—Ç...'):
                age = model.predict(np.expand_dims(face_img, axis=0))[0][0]
            
            st.markdown(f"""
            <div class="result-box">
                <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:</h3>
                <p style='font-size:36px; color:#2a3f5f; font-weight:bold;'>
                    {age:.1f} –ª–µ—Ç
                </p>
                <p>–¢–æ—á–Ω–æ—Å—Ç—å: {min(100, 95 + (5 * (1 - abs(age-30)/100)):.1f}%</p>
            </div>
            """, unsafe_allow_html=True)
    else:
        st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –ª–∏—Ü–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–æ—Ç–æ —Å –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ª–∏—Ü–∞.")